import { Test, TestingModule } from '@nestjs/testing';
import {
  DockerComposeEnvironment,
  StartedDockerComposeEnvironment,
  StartedTestContainer,
} from 'testcontainers';
import * as request from 'supertest';
import { INestApplication } from '@nestjs/common';
import { AppModule } from '../src/app.module';

const SignUpQuery = {
  query: `mutation signup(
      $type: UserType!
      $email: Email!
      $name: String!
      $password: String!
    ) {
      signUp(type: $type, email: $email, name: $name, password: $password) {
        token
        user {
          ...data
        }
      }
    }

    fragment data on User {
      id
      name
      email
    }`,
  variables: {
    type: 'SCHOOL',
    email: 'email@email.com',
    name: 'testUser',
    password: 'password',
  },
};

describe('MyService', () => {
  let container: StartedTestContainer;
  let environment: StartedDockerComposeEnvironment;
  let app: INestApplication;

  beforeAll(async () => {
    const composeFilePath = '../';
    const composeFile = 'docker-compose.dev.yaml';

    environment = await new DockerComposeEnvironment(
      composeFilePath,
      composeFile,
    )
      .withEnvironment({ DATABASE_PASSWORD_FILE: 'db_password_example.conf' })
      .up(['db']);
    container = environment.getContainer('db');

    beforeEach(async () => {
      const moduleFixture: TestingModule = await Test.createTestingModule({
        imports: [AppModule],
      }).compile();

      app = moduleFixture.createNestApplication();
      await app.init();
    });
  });

  afterAll(async () => {
    await environment.down({ timeout: 10000 });
  });

  it('SignUp User', async () => {
    const response = await request(app.getHttpServer())
      .post('/graphql')
      .send(SignUpQuery)
      .expect(201);

    expect(response.body).toMatchObject(SignUpQuery.variables);
  });
});
