# Junqo Project
# This file contains the schema for the Junqo API
# Please read the `README.md` file before making any changes

# Endpoints
type Query {
  # Users
  users(
    first: Int,
    after: String
    filter: UserFilterInput
  ): UserConnection!
  user(id: ID!): User!

  # Messages
  messages(
    first: Int,
    after: String
    filter: MessageFilterInput
  ): MessageConnection!
  message(id: ID!): Message!

  # Offers
  offers(
    first: Int,
    after: String,
    filter: OfferFilterInput
  ): OfferConnection!
  offer(id: ID!): Offer!

  # AI
  profileFromResume(input: ResumeInput!): ProfileFromResumeResponse!
  interviewReply(input: InterviewInput!): InterviewReplyResponse!
}

type Mutation {
  # Users
  createUser(
    name: String!
    email: EmailAddress!
    password: String!
  ): MutationResponse!
  updateUser(id: ID!, input: UpdateUserInput!): MutationResponse!
  deleteUser(id: ID!): MutationResponse!

  # Messages
  createMessage(text: String!, userId: ID!): MutationResponse!
  updateMessage(id: ID!, text: String): MutationResponse!
  deleteMessage(id: ID!): MutationResponse!

  # Offers
  createOffer(title: String!, description: String!, userId: ID!): MutationResponse!
  updateOffer(id: ID!, title: String, description: String): MutationResponse!
  deleteOffer(id: ID!): MutationResponse!
}

type Subscription {
    # Messages
    messageAdded(userId: ID): Message!

    # Offers
    offerAdded(category: String): Offer!
}

# Responses types

"""
Union type for mutation responses
"""
union MutationResponse = SuccessResponse | ValidationError | NotFoundError | AuthenticationError | AuthorizationError | RateLimitError

type SuccessResponse {
  success: Boolean!
  message: String
}

type ValidationError {
  code: ErrorCode!
  field: String!
  message: String!
}

type NotFoundError {
  message: String!
}

type AuthenticationError {
    message: String!
    loginUrl: String!
}

type AuthorizationError {
    message: String!
    requiredPermissions: [String!]!
}

type RateLimitError {
    message: String!
    retryAfter: Int!
}

enum ErrorCode {
  VALIDATION_FAILED
  AUTHENTICATION_REQUIRED
  PERMISSION_DENIED
  RESOURCE_NOT_FOUND
  RATE_LIMIT_EXCEEDED
}

union ProfileFromResumeResponse = UserProfile | AIError
union InterviewReplyResponse = InterviewResponse | AIError

type AIError {
  code: String!
  message: String!
  retryable: Boolean!
}

# Input / Output types
## User

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

input UpdateUserInput {
  name: String
  email: EmailAddress
  password: String
}

input UserFilterInput {
  nameContains: String
  email: EmailAddress
  createdAfter: DateTime
  createdBefore: DateTime
}

## Message

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}
type MessageEdge {
  node: Message!
  cursor: String!
}

input MessageFilterInput {
  userId: ID
  textContains: String
  createdAfter: DateTime
  createdBefore: DateTime
}

## Offer

type OfferConnection {
  edges: [OfferEdge!]!
  pageInfo: PageInfo!
}

type OfferEdge {
  node: Offer!
  cursor: String!
}

input OfferFilterInput {
  userId: ID
  status: OfferStatus
  titleContains: String
  createdAfter: DateTime
  createdBefore: DateTime
}

## AI

"""
Input type for resume parsing
"""
input ResumeInput {
  content: String!
  format: ResumeFormat!
}

"""
Input type for interview responses
"""
input InterviewInput {
  question: String!
  context: String
}

type UserProfile {
  name: String
  skills: [String!]!
  experience: [Experience!]!
}

type InterviewResponse {
  answer: String!
  confidence: Float!
}

## Common

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Interfaces

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
compliant with the `date-time` format outlined in section 5.6 of RFC 3339.
"""
scalar DateTime


"""
A field whose value conforms to the standard internet email address format
as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""
Interface for common fields
"""
interface Stored {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

# Main types

type User implements Stored {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  email: EmailAddress!
  messages: [Message!]!
  offers: [Offer!]!
}

type Experience {
  title: String!
  company: String!
  startDate: DateTime!
  endDate: DateTime
  description: String!
  skills: [String!]!
}

type Message implements Stored {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  text: String!
  user: User!
}

type Offer implements Stored {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  title: String!
  description: String!
  user: User!
  status: OfferStatus!
  expiresAt: DateTime
  category: String!
  tags: [String!]
  viewCount: Int!
}

enum OfferStatus {
  OPEN
  CLOSED
  PENDING
}

enum ResumeFormat {
  PDF
  HTML
}
