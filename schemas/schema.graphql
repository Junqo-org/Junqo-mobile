# Junqo Project
# This file contains the schema for the Junqo API
# Please read the `README.md` file before making any changes

# Endpoints
type Query {
    # Users
    users(first: Int, after: String): UserConnection!
    user(id: ID!): User!

    # Messages
    messages(first: Int, after: String): MessageConnection!
    message(id: ID!): Message!

    # Offers
    offers(first: Int, after: String): OfferConnection!
    offer(id: ID!): Offer!

    # AI
    profileFromResume(input: ResumeInput!): UserProfile!
    interviewReply(input: InterviewInput!): InterviewResponse!
}

type Mutation {
    # Users
    createUser(name: String!, email: String!, password: String!): MutationResponse!
    updateUser(id: ID!, input: UpdateUserInput!): MutationResponse!
    deleteUser(id: ID!): MutationResponse!

    # Messages
    createMessage(text: String!, userId: ID!): MutationResponse!
    updateMessage(id: ID!, text: String): MutationResponse!
    deleteMessage(id: ID!): MutationResponse!

    # Offers
    createOffer(title: String!, description: String!, userId: ID!): MutationResponse!
    updateOffer(id: ID!, title: String, description: String): MutationResponse!
    deleteOffer(id: ID!): MutationResponse!
}

type Subscription {
    # Messages
    messageAdded(userId: ID): Message!

    # Offers
    offerAdded(category: String): Offer!
}

# Responses types

"""
Union type for mutation responses
"""
union MutationResponse = SuccessResponse | ValidationError | NotFoundError

type SuccessResponse {
  success: Boolean!
  message: String
}

type ValidationError {
  field: String!
  message: String!
}

type NotFoundError {
  message: String!
}

# Input / Output types
## User

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
}

type UserEdge {
    node: User!
    cursor: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

## Message

type MessageConnection {
    edges: [MessageEdge!]!
    pageInfo: PageInfo!
}
type MessageEdge {
    node: Message!
    cursor: String!
}

## Offer

type OfferConnection {
    edges: [OfferEdge!]!
    pageInfo: PageInfo!
}
type OfferEdge {
    node: Offer!
    cursor: String!
}

## AI

"""
Input type for resume parsing
"""
input ResumeInput {
  content: String!
  format: ResumeFormat!
}

"""
Input type for interview responses
"""
input InterviewInput {
  question: String!
  context: String
}

type UserProfile {
  name: String
  skills: [String!]!
  experience: [Experience!]!
}

type InterviewResponse {
  answer: String!
  confidence: Float!
}

## Common

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

# Interfaces

"""
Interface for common fields
"""
interface Stored {
  id: ID!
  createdAt: String!
  updatedAt: String!
}

# Main types

type User implements Stored {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  email: String!
  messages: [Message!]!
  offers: [Offer!]!
}

type Experience {
  title: String!
  company: String!
  startDate: String!
  endDate: String
}

type Message implements Stored {
    id: ID!
    createdAt: String!
    updatedAt: String!
    text: String!
    user: User!
}

type Offer implements Stored {
    id: ID!
    createdAt: String!
    updatedAt: String!
    title: String!
    description: String!
    user: User!
    status: OfferStatus!
}

enum OfferStatus {
    OPEN
    CLOSED
    PENDING
}

enum ResumeFormat {
  PDF
  HTML
}
