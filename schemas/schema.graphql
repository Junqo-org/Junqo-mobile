# Junqo Project
# This file contains the schema for the Junqo API
# Please read the `README.md` file before making any changes

# Endpoints
type Query {
    # Users
    users(first: Int, after: String): UserConnection!
    user(id: ID!): User!

    # Messages
    messages(first: Int, after: String): MessageConnection!
    message(id: ID!): Message!

    # Offers
    offers(first: Int, after: String): OfferConnection!
    offer(id: ID!): Offer!

    # AI
    profileFromResume(resume: String!): User!
    interviewReply(interview: String!): String!
}

type Mutation {
    # Users
    createUser(name: String!, email: String!, password: String!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): User!

    # Messages
    createMessage(text: String!, userId: ID!): Message!
    updateMessage(id: ID!, text: String): Message!
    deleteMessage(id: ID!): Message!

    # Offers
    createOffer(title: String!, description: String!, userId: ID!): Offer!
    updateOffer(id: ID!, title: String, description: String): Offer!
    deleteOffer(id: ID!): Offer!
}

type Subscription {
    # Messages
    messageAdded(userId: ID): Message!

    # Offers
    offerAdded(category: String): Offer!
}

type MessageConnection {
    edges: [MessageEdge!]!
    pageInfo: PageInfo!
}
type MessageEdge {
    node: Message!
    cursor: String!
}
type OfferConnection {
    edges: [OfferEdge!]!
    pageInfo: PageInfo!
}
type OfferEdge {
    node: Offer!
    cursor: String!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
}

type UserEdge {
    node: User!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

# Types
## Users

type User {
    id: ID!
    name: String!
    email: String!
    createdAt: String!
    updatedAt: String!
    messages: [Message!]!
    offers: [Offer!]!
}

## Messages

type Message {
    id: ID!
    text: String!
    createdAt: String!
    updatedAt: String!
    user: User!
}

type Offer {
    id: ID!
    title: String!
    description: String!
    createdAt: String!
    updatedAt: String!
    user: User!
    status: OfferStatus!
}

enum OfferStatus {
    OPEN
    CLOSED
    PENDING
}
